apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker-compose.yml
    kompose.version: 1.26.0 (40646f47)
  creationTimestamp: null
  labels:
    io.kompose.service: client
  name: client
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: client
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker-compose.yml
        kompose.version: 1.26.0 (40646f47)
      creationTimestamp: null
      labels:
        io.kompose.service: client
    spec:
      containers:
        - env:
            - name: API_GATEWAY_PORT
              valueFrom:
                configMapKeyRef:
                  key: API_GATEWAY_PORT
                  name: env
            - name: API_GATEWAY_URI
              valueFrom:
                configMapKeyRef:
                  key: API_GATEWAY_URI
                  name: env
            - name: CDN_HOST
              valueFrom:
                configMapKeyRef:
                  key: CDN_HOST
                  name: env
            - name: CDN_PORT
              valueFrom:
                configMapKeyRef:
                  key: CDN_PORT
                  name: env
            - name: FRONTEND_CLIENT_PORT
              valueFrom:
                configMapKeyRef:
                  key: FRONTEND_CLIENT_PORT
                  name: env
            - name: MONGODB_COMPASS_PORT
              valueFrom:
                configMapKeyRef:
                  key: MONGODB_COMPASS_PORT
                  name: env
            - name: MONGO_DB_CONNECTION_URI
              valueFrom:
                configMapKeyRef:
                  key: MONGO_DB_CONNECTION_URI
                  name: env
            - name: NEXT_PUBLIC_API_GATEWAY_URI
              valueFrom:
                configMapKeyRef:
                  key: NEXT_PUBLIC_API_GATEWAY_URI
                  name: env
            - name: ORDERS_SERVICE_CONTAINER_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: ORDERS_SERVICE_CONTAINER_ORIGIN
                  name: env
            - name: ORDERS_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  key: ORDERS_SERVICE_PORT
                  name: env
            - name: ORDER_HISTORY_SERVICE_CONTAINER_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: ORDER_HISTORY_SERVICE_CONTAINER_ORIGIN
                  name: env
            - name: ORDER_HISTORY_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  key: ORDER_HISTORY_SERVICE_PORT
                  name: env
            - name: PAYMENTS_SERVICE_CONTAINER_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: PAYMENTS_SERVICE_CONTAINER_ORIGIN
                  name: env
            - name: PAYMENTS_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  key: PAYMENTS_SERVICE_PORT
                  name: env
            - name: PRODUCTS_SERVICE_CONTAINER_ORIGIN
              valueFrom:
                configMapKeyRef:
                  key: PRODUCTS_SERVICE_CONTAINER_ORIGIN
                  name: env
            - name: PRODUCTS_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  key: PRODUCTS_SERVICE_PORT
                  name: env
            - name: PROJECT_ID
              valueFrom:
                configMapKeyRef:
                  key: PROJECT_ID
                  name: env
            - name: REDIS_CONNECTION_URI
              valueFrom:
                configMapKeyRef:
                  key: REDIS_CONNECTION_URI
                  name: env
            - name: REDIS_INSIGHT_PORT
              valueFrom:
                configMapKeyRef:
                  key: REDIS_INSIGHT_PORT
                  name: env
          image: gcr.io/central-beach-194106/redis-ms-cqrs-client
          name: client
          ports:
            - containerPort: 4200
          resources: {}
          stdin: true
          tty: true
      restartPolicy: Always
status: {}
